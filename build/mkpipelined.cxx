/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Mon Mar  6 17:50:42 EST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkpipelined.h"


/* Literal declarations */
static unsigned int const UWide_literal_69_haaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									2863311530u,
									10u };
static tUWide const UWide_literal_69_haaaaaaaaaaaaaaaaa(69u,
							UWide_literal_69_haaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_10("\n", 1u);
static std::string const __str_literal_4("C\t1", 3u);
static std::string const __str_literal_7("F", 1u);
static std::string const __str_literal_5("I\t%d\t%d\t%d", 10u);
static std::string const __str_literal_3("Kanata\t0004\nC=\t1\n", 17u);
static std::string const __str_literal_8("L\t%d\t%d\t", 8u);
static std::string const __str_literal_9("PC %x", 5u);
static std::string const __str_literal_11("R\t%d\t%d\t%d", 10u);
static std::string const __str_literal_6("S\t%d\t%d\t%s", 10u);
static std::string const __str_literal_1("output.log", 10u);
static std::string const __str_literal_2("w", 1u);


/* Constructor */
MOD_mkpipelined::MOD_mkpipelined(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_commit_id(simHdl, "commit_id", this, 48u, 0llu, (tUInt8)0u),
    INST_fresh_id(simHdl, "fresh_id", this, 48u, 0llu, (tUInt8)0u),
    INST_fromDmem_rv(simHdl,
		     "fromDmem_rv",
		     this,
		     69u,
		     bs_wide_tmp(69u).set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
													     0u,
													     5u),
						       2u,
						       0u,
						       5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
									  1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
											     0u),
		     (tUInt8)0u),
    INST_fromImem_rv(simHdl,
		     "fromImem_rv",
		     this,
		     69u,
		     bs_wide_tmp(69u).set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
													     0u,
													     5u),
						       2u,
						       0u,
						       5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
									  1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
											     0u),
		     (tUInt8)0u),
    INST_fromMMIO_rv(simHdl,
		     "fromMMIO_rv",
		     this,
		     69u,
		     bs_wide_tmp(69u).set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
													     0u,
													     5u),
						       2u,
						       0u,
						       5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
									  1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
											     0u),
		     (tUInt8)0u),
    INST_lfh(simHdl, "lfh", this, 32u, 0u, (tUInt8)0u),
    INST_retired(simHdl, "retired", this, 48u, 2u, (tUInt8)1u, 0u),
    INST_squashed(simHdl, "squashed", this, 48u, 2u, (tUInt8)1u, 0u),
    INST_starting(simHdl, "starting", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_toDmem_rv(simHdl,
		   "toDmem_rv",
		   this,
		   69u,
		   bs_wide_tmp(69u).set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u, 0u, 5u),
						     2u,
						     0u,
						     5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
									1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
											   0u),
		   (tUInt8)0u),
    INST_toImem_rv(simHdl,
		   "toImem_rv",
		   this,
		   69u,
		   bs_wide_tmp(69u).set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u, 0u, 5u),
						     2u,
						     0u,
						     5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
									1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
											   0u),
		   (tUInt8)0u),
    INST_toMMIO_rv(simHdl,
		   "toMMIO_rv",
		   this,
		   69u,
		   bs_wide_tmp(69u).set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u, 0u, 5u),
						     2u,
						     0u,
						     5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
									1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
											   0u),
		   (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_toMMIO_rv_port1__read____d24(69u),
    DEF_toDmem_rv_port1__read____d20(69u),
    DEF_toImem_rv_port1__read____d16(69u),
    DEF_fromMMIO_rv_port0__read____d26(69u),
    DEF_fromDmem_rv_port0__read____d22(69u),
    DEF_fromImem_rv_port0__read____d18(69u),
    DEF_TASK_fopen___d2(2863311530u),
    DEF__1_CONCAT_getMMIOResp_a___d25(69u),
    DEF__1_CONCAT_getDResp_a___d21(69u),
    DEF__1_CONCAT_getIResp_a___d17(69u),
    DEF__0_CONCAT_DONTCARE___d15(69u)
{
  PORT_getIResp_a.setSize(68u);
  PORT_getIResp_a.clear();
  PORT_getDResp_a.setSize(68u);
  PORT_getDResp_a.clear();
  PORT_getMMIOResp_a.setSize(68u);
  PORT_getMMIOResp_a.clear();
  PORT_getIReq.setSize(68u);
  PORT_getIReq.clear();
  PORT_getDReq.setSize(68u);
  PORT_getDReq.clear();
  PORT_getMMIOReq.setSize(68u);
  PORT_getMMIOReq.clear();
  symbol_count = 23u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkpipelined::init_symbols_0()
{
  init_symbol(&symbols[0u], "commit_id", SYM_MODULE, &INST_commit_id);
  init_symbol(&symbols[1u], "fresh_id", SYM_MODULE, &INST_fresh_id);
  init_symbol(&symbols[2u], "fromDmem_rv", SYM_MODULE, &INST_fromDmem_rv);
  init_symbol(&symbols[3u], "fromImem_rv", SYM_MODULE, &INST_fromImem_rv);
  init_symbol(&symbols[4u], "fromMMIO_rv", SYM_MODULE, &INST_fromMMIO_rv);
  init_symbol(&symbols[5u], "getDReq", SYM_PORT, &PORT_getDReq, 68u);
  init_symbol(&symbols[6u], "getDResp_a", SYM_PORT, &PORT_getDResp_a, 68u);
  init_symbol(&symbols[7u], "getIReq", SYM_PORT, &PORT_getIReq, 68u);
  init_symbol(&symbols[8u], "getIResp_a", SYM_PORT, &PORT_getIResp_a, 68u);
  init_symbol(&symbols[9u], "getMMIOReq", SYM_PORT, &PORT_getMMIOReq, 68u);
  init_symbol(&symbols[10u], "getMMIOResp_a", SYM_PORT, &PORT_getMMIOResp_a, 68u);
  init_symbol(&symbols[11u], "lfh", SYM_MODULE, &INST_lfh);
  init_symbol(&symbols[12u], "RL_administrative_konata_commit", SYM_RULE);
  init_symbol(&symbols[13u], "RL_administrative_konata_flush", SYM_RULE);
  init_symbol(&symbols[14u], "RL_do_tic_logging", SYM_RULE);
  init_symbol(&symbols[15u], "RL_fetch", SYM_RULE);
  init_symbol(&symbols[16u], "retired", SYM_MODULE, &INST_retired);
  init_symbol(&symbols[17u], "squashed", SYM_MODULE, &INST_squashed);
  init_symbol(&symbols[18u], "starting", SYM_MODULE, &INST_starting);
  init_symbol(&symbols[19u], "starting__h1637", SYM_DEF, &DEF_starting__h1637, 1u);
  init_symbol(&symbols[20u], "toDmem_rv", SYM_MODULE, &INST_toDmem_rv);
  init_symbol(&symbols[21u], "toImem_rv", SYM_MODULE, &INST_toImem_rv);
  init_symbol(&symbols[22u], "toMMIO_rv", SYM_MODULE, &INST_toMMIO_rv);
}


/* Rule actions */

void MOD_mkpipelined::RL_do_tic_logging()
{
  DEF_lfh___d3 = INST_lfh.METH_read();
  DEF_starting__h1637 = INST_starting.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_starting__h1637)
      DEF_TASK_fopen___d2 = dollar_fopen("s,s", &__str_literal_1, &__str_literal_2);
    else
      DEF_TASK_fopen___d2 = 2863311530u;
  if (DEF_starting__h1637)
    INST_lfh.METH_write(DEF_TASK_fopen___d2);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_starting__h1637)
      dollar_fwrite(sim_hdl, this, "32,s", DEF_TASK_fopen___d2, &__str_literal_3);
  if (DEF_starting__h1637)
    INST_starting.METH_write((tUInt8)0u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_fdisplay(sim_hdl, this, "32,s", DEF_lfh___d3, &__str_literal_4);
}

void MOD_mkpipelined::RL_fetch()
{
  tUInt64 DEF_x__h2108;
  tUInt64 DEF_v__h2094;
  DEF_signed_0___d7 = 0u;
  DEF_v__h2094 = INST_fresh_id.METH_read();
  DEF_lfh___d3 = INST_lfh.METH_read();
  DEF_x__h2108 = 281474976710655llu & (DEF_v__h2094 + 1llu);
  INST_fresh_id.METH_write(DEF_x__h2108);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_fdisplay(sim_hdl,
		    this,
		    "32,s,48,48,8",
		    DEF_lfh___d3,
		    &__str_literal_5,
		    DEF_v__h2094,
		    DEF_v__h2094,
		    (tUInt8)0u);
    dollar_fdisplay(sim_hdl,
		    this,
		    "32,s,48,-32,s",
		    DEF_lfh___d3,
		    &__str_literal_6,
		    DEF_v__h2094,
		    DEF_signed_0___d7,
		    &__str_literal_7);
    dollar_fwrite(sim_hdl,
		  this,
		  "32,s,48,-32",
		  DEF_lfh___d3,
		  &__str_literal_8,
		  DEF_v__h2094,
		  DEF_signed_0___d7);
    dollar_fwrite(sim_hdl, this, "32,s,32", DEF_lfh___d3, &__str_literal_9, 2863311530u);
    dollar_fwrite(sim_hdl, this, "32,s", DEF_lfh___d3, &__str_literal_10);
  }
}

void MOD_mkpipelined::RL_administrative_konata_commit()
{
  tUInt64 DEF_x__h2484;
  tUInt64 DEF__read__h1384;
  tUInt64 DEF_f__h2473;
  DEF_signed_0___d7 = 0u;
  DEF_f__h2473 = INST_retired.METH_first();
  DEF__read__h1384 = INST_commit_id.METH_read();
  DEF_lfh___d3 = INST_lfh.METH_read();
  DEF_x__h2484 = 281474976710655llu & (DEF__read__h1384 + 1llu);
  INST_retired.METH_deq();
  INST_commit_id.METH_write(DEF_x__h2484);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_fdisplay(sim_hdl,
		    this,
		    "32,s,48,48,-32",
		    DEF_lfh___d3,
		    &__str_literal_11,
		    DEF_f__h2473,
		    DEF__read__h1384,
		    DEF_signed_0___d7);
}

void MOD_mkpipelined::RL_administrative_konata_flush()
{
  tUInt64 DEF_f__h2607;
  tUInt32 DEF_signed_1___d14;
  DEF_signed_1___d14 = 1u;
  DEF_signed_0___d7 = 0u;
  DEF_f__h2607 = INST_squashed.METH_first();
  DEF_lfh___d3 = INST_lfh.METH_read();
  INST_squashed.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_fdisplay(sim_hdl,
		    this,
		    "32,s,48,-32,-32",
		    DEF_lfh___d3,
		    &__str_literal_11,
		    DEF_f__h2607,
		    DEF_signed_0___d7,
		    DEF_signed_1___d14);
}


/* Methods */

tUWide MOD_mkpipelined::METH_getIReq()
{
  DEF_toImem_rv_port1__read____d16 = INST_toImem_rv.METH_port1__read();
  wop_primExtractWide(68u, 69u, DEF_toImem_rv_port1__read____d16, 32u, 67u, 32u, 0u, PORT_getIReq);
  DEF__0_CONCAT_DONTCARE___d15.set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
												      0u,
												      5u),
						2u,
						0u,
						5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  INST_toImem_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d15);
  return PORT_getIReq;
}

tUInt8 MOD_mkpipelined::METH_RDY_getIReq()
{
  tUInt8 DEF_CAN_FIRE_getIReq;
  tUInt8 PORT_RDY_getIReq;
  DEF_toImem_rv_port1__read____d16 = INST_toImem_rv.METH_port1__read();
  DEF_CAN_FIRE_getIReq = DEF_toImem_rv_port1__read____d16.get_bits_in_word8(2u, 4u, 1u);
  PORT_RDY_getIReq = DEF_CAN_FIRE_getIReq;
  return PORT_RDY_getIReq;
}

void MOD_mkpipelined::METH_getIResp(tUWide ARG_getIResp_a)
{
  PORT_getIResp_a = ARG_getIResp_a;
  DEF__1_CONCAT_getIResp_a___d17.set_bits_in_word((tUInt8)31u & (((tUInt8)1u << 4u) | ARG_getIResp_a.get_bits_in_word8(2u,
														       0u,
														       4u)),
						  2u,
						  0u,
						  5u).set_whole_word(ARG_getIResp_a.get_whole_word(1u),
								     1u).set_whole_word(ARG_getIResp_a.get_whole_word(0u),
											0u);
  INST_fromImem_rv.METH_port0__write(DEF__1_CONCAT_getIResp_a___d17);
}

tUInt8 MOD_mkpipelined::METH_RDY_getIResp()
{
  tUInt8 DEF_CAN_FIRE_getIResp;
  tUInt8 PORT_RDY_getIResp;
  DEF_fromImem_rv_port0__read____d18 = INST_fromImem_rv.METH_port0__read();
  DEF_CAN_FIRE_getIResp = !DEF_fromImem_rv_port0__read____d18.get_bits_in_word8(2u, 4u, 1u);
  PORT_RDY_getIResp = DEF_CAN_FIRE_getIResp;
  return PORT_RDY_getIResp;
}

tUWide MOD_mkpipelined::METH_getDReq()
{
  DEF_toDmem_rv_port1__read____d20 = INST_toDmem_rv.METH_port1__read();
  wop_primExtractWide(68u, 69u, DEF_toDmem_rv_port1__read____d20, 32u, 67u, 32u, 0u, PORT_getDReq);
  DEF__0_CONCAT_DONTCARE___d15.set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
												      0u,
												      5u),
						2u,
						0u,
						5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  INST_toDmem_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d15);
  return PORT_getDReq;
}

tUInt8 MOD_mkpipelined::METH_RDY_getDReq()
{
  tUInt8 DEF_CAN_FIRE_getDReq;
  tUInt8 PORT_RDY_getDReq;
  DEF_toDmem_rv_port1__read____d20 = INST_toDmem_rv.METH_port1__read();
  DEF_CAN_FIRE_getDReq = DEF_toDmem_rv_port1__read____d20.get_bits_in_word8(2u, 4u, 1u);
  PORT_RDY_getDReq = DEF_CAN_FIRE_getDReq;
  return PORT_RDY_getDReq;
}

void MOD_mkpipelined::METH_getDResp(tUWide ARG_getDResp_a)
{
  PORT_getDResp_a = ARG_getDResp_a;
  DEF__1_CONCAT_getDResp_a___d21.set_bits_in_word((tUInt8)31u & (((tUInt8)1u << 4u) | ARG_getDResp_a.get_bits_in_word8(2u,
														       0u,
														       4u)),
						  2u,
						  0u,
						  5u).set_whole_word(ARG_getDResp_a.get_whole_word(1u),
								     1u).set_whole_word(ARG_getDResp_a.get_whole_word(0u),
											0u);
  INST_fromDmem_rv.METH_port0__write(DEF__1_CONCAT_getDResp_a___d21);
}

tUInt8 MOD_mkpipelined::METH_RDY_getDResp()
{
  tUInt8 DEF_CAN_FIRE_getDResp;
  tUInt8 PORT_RDY_getDResp;
  DEF_fromDmem_rv_port0__read____d22 = INST_fromDmem_rv.METH_port0__read();
  DEF_CAN_FIRE_getDResp = !DEF_fromDmem_rv_port0__read____d22.get_bits_in_word8(2u, 4u, 1u);
  PORT_RDY_getDResp = DEF_CAN_FIRE_getDResp;
  return PORT_RDY_getDResp;
}

tUWide MOD_mkpipelined::METH_getMMIOReq()
{
  DEF_toMMIO_rv_port1__read____d24 = INST_toMMIO_rv.METH_port1__read();
  wop_primExtractWide(68u, 69u, DEF_toMMIO_rv_port1__read____d24, 32u, 67u, 32u, 0u, PORT_getMMIOReq);
  DEF__0_CONCAT_DONTCARE___d15.set_bits_in_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
												      0u,
												      5u),
						2u,
						0u,
						5u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(1u),
								   1u).set_whole_word(UWide_literal_69_haaaaaaaaaaaaaaaaa.get_whole_word(0u),
										      0u);
  INST_toMMIO_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d15);
  return PORT_getMMIOReq;
}

tUInt8 MOD_mkpipelined::METH_RDY_getMMIOReq()
{
  tUInt8 DEF_CAN_FIRE_getMMIOReq;
  tUInt8 PORT_RDY_getMMIOReq;
  DEF_toMMIO_rv_port1__read____d24 = INST_toMMIO_rv.METH_port1__read();
  DEF_CAN_FIRE_getMMIOReq = DEF_toMMIO_rv_port1__read____d24.get_bits_in_word8(2u, 4u, 1u);
  PORT_RDY_getMMIOReq = DEF_CAN_FIRE_getMMIOReq;
  return PORT_RDY_getMMIOReq;
}

void MOD_mkpipelined::METH_getMMIOResp(tUWide ARG_getMMIOResp_a)
{
  PORT_getMMIOResp_a = ARG_getMMIOResp_a;
  DEF__1_CONCAT_getMMIOResp_a___d25.set_bits_in_word((tUInt8)31u & (((tUInt8)1u << 4u) | ARG_getMMIOResp_a.get_bits_in_word8(2u,
															     0u,
															     4u)),
						     2u,
						     0u,
						     5u).set_whole_word(ARG_getMMIOResp_a.get_whole_word(1u),
									1u).set_whole_word(ARG_getMMIOResp_a.get_whole_word(0u),
											   0u);
  INST_fromMMIO_rv.METH_port0__write(DEF__1_CONCAT_getMMIOResp_a___d25);
}

tUInt8 MOD_mkpipelined::METH_RDY_getMMIOResp()
{
  tUInt8 DEF_CAN_FIRE_getMMIOResp;
  tUInt8 PORT_RDY_getMMIOResp;
  DEF_fromMMIO_rv_port0__read____d26 = INST_fromMMIO_rv.METH_port0__read();
  DEF_CAN_FIRE_getMMIOResp = !DEF_fromMMIO_rv_port0__read____d26.get_bits_in_word8(2u, 4u, 1u);
  PORT_RDY_getMMIOResp = DEF_CAN_FIRE_getMMIOResp;
  return PORT_RDY_getMMIOResp;
}


/* Reset routines */

void MOD_mkpipelined::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_toMMIO_rv.reset_RST(ARG_rst_in);
  INST_toImem_rv.reset_RST(ARG_rst_in);
  INST_toDmem_rv.reset_RST(ARG_rst_in);
  INST_starting.reset_RST(ARG_rst_in);
  INST_squashed.reset_RST(ARG_rst_in);
  INST_retired.reset_RST(ARG_rst_in);
  INST_lfh.reset_RST(ARG_rst_in);
  INST_fromMMIO_rv.reset_RST(ARG_rst_in);
  INST_fromImem_rv.reset_RST(ARG_rst_in);
  INST_fromDmem_rv.reset_RST(ARG_rst_in);
  INST_fresh_id.reset_RST(ARG_rst_in);
  INST_commit_id.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkpipelined::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkpipelined::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_commit_id.dump_state(indent + 2u);
  INST_fresh_id.dump_state(indent + 2u);
  INST_fromDmem_rv.dump_state(indent + 2u);
  INST_fromImem_rv.dump_state(indent + 2u);
  INST_fromMMIO_rv.dump_state(indent + 2u);
  INST_lfh.dump_state(indent + 2u);
  INST_retired.dump_state(indent + 2u);
  INST_squashed.dump_state(indent + 2u);
  INST_starting.dump_state(indent + 2u);
  INST_toDmem_rv.dump_state(indent + 2u);
  INST_toImem_rv.dump_state(indent + 2u);
  INST_toMMIO_rv.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkpipelined::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 33u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_fopen___d2", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d15", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_getDResp_a___d21", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_getIResp_a___d17", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_getMMIOResp_a___d25", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "fromDmem_rv_port0__read____d22", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "fromImem_rv_port0__read____d18", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "fromMMIO_rv_port0__read____d26", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "lfh___d3", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_0___d7", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "starting__h1637", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "toDmem_rv_port1__read____d20", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "toImem_rv_port1__read____d16", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "toMMIO_rv_port1__read____d24", 69u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getDReq", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getDResp_a", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getIReq", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getIResp_a", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getMMIOReq", 68u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "getMMIOResp_a", 68u);
  num = INST_commit_id.dump_VCD_defs(num);
  num = INST_fresh_id.dump_VCD_defs(num);
  num = INST_fromDmem_rv.dump_VCD_defs(num);
  num = INST_fromImem_rv.dump_VCD_defs(num);
  num = INST_fromMMIO_rv.dump_VCD_defs(num);
  num = INST_lfh.dump_VCD_defs(num);
  num = INST_retired.dump_VCD_defs(num);
  num = INST_squashed.dump_VCD_defs(num);
  num = INST_starting.dump_VCD_defs(num);
  num = INST_toDmem_rv.dump_VCD_defs(num);
  num = INST_toImem_rv.dump_VCD_defs(num);
  num = INST_toMMIO_rv.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkpipelined::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkpipelined &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkpipelined::vcd_defs(tVCDDumpType dt, MOD_mkpipelined &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
    vcd_write_x(sim_hdl, num++, 68u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_fopen___d2) != DEF_TASK_fopen___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_fopen___d2, 32u);
	backing.DEF_TASK_fopen___d2 = DEF_TASK_fopen___d2;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d15) != DEF__0_CONCAT_DONTCARE___d15)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d15, 69u);
	backing.DEF__0_CONCAT_DONTCARE___d15 = DEF__0_CONCAT_DONTCARE___d15;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_getDResp_a___d21) != DEF__1_CONCAT_getDResp_a___d21)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_getDResp_a___d21, 69u);
	backing.DEF__1_CONCAT_getDResp_a___d21 = DEF__1_CONCAT_getDResp_a___d21;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_getIResp_a___d17) != DEF__1_CONCAT_getIResp_a___d17)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_getIResp_a___d17, 69u);
	backing.DEF__1_CONCAT_getIResp_a___d17 = DEF__1_CONCAT_getIResp_a___d17;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_getMMIOResp_a___d25) != DEF__1_CONCAT_getMMIOResp_a___d25)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_getMMIOResp_a___d25, 69u);
	backing.DEF__1_CONCAT_getMMIOResp_a___d25 = DEF__1_CONCAT_getMMIOResp_a___d25;
      }
      ++num;
      if ((backing.DEF_fromDmem_rv_port0__read____d22) != DEF_fromDmem_rv_port0__read____d22)
      {
	vcd_write_val(sim_hdl, num, DEF_fromDmem_rv_port0__read____d22, 69u);
	backing.DEF_fromDmem_rv_port0__read____d22 = DEF_fromDmem_rv_port0__read____d22;
      }
      ++num;
      if ((backing.DEF_fromImem_rv_port0__read____d18) != DEF_fromImem_rv_port0__read____d18)
      {
	vcd_write_val(sim_hdl, num, DEF_fromImem_rv_port0__read____d18, 69u);
	backing.DEF_fromImem_rv_port0__read____d18 = DEF_fromImem_rv_port0__read____d18;
      }
      ++num;
      if ((backing.DEF_fromMMIO_rv_port0__read____d26) != DEF_fromMMIO_rv_port0__read____d26)
      {
	vcd_write_val(sim_hdl, num, DEF_fromMMIO_rv_port0__read____d26, 69u);
	backing.DEF_fromMMIO_rv_port0__read____d26 = DEF_fromMMIO_rv_port0__read____d26;
      }
      ++num;
      if ((backing.DEF_lfh___d3) != DEF_lfh___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_lfh___d3, 32u);
	backing.DEF_lfh___d3 = DEF_lfh___d3;
      }
      ++num;
      if ((backing.DEF_signed_0___d7) != DEF_signed_0___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_0___d7, 32u);
	backing.DEF_signed_0___d7 = DEF_signed_0___d7;
      }
      ++num;
      if ((backing.DEF_starting__h1637) != DEF_starting__h1637)
      {
	vcd_write_val(sim_hdl, num, DEF_starting__h1637, 1u);
	backing.DEF_starting__h1637 = DEF_starting__h1637;
      }
      ++num;
      if ((backing.DEF_toDmem_rv_port1__read____d20) != DEF_toDmem_rv_port1__read____d20)
      {
	vcd_write_val(sim_hdl, num, DEF_toDmem_rv_port1__read____d20, 69u);
	backing.DEF_toDmem_rv_port1__read____d20 = DEF_toDmem_rv_port1__read____d20;
      }
      ++num;
      if ((backing.DEF_toImem_rv_port1__read____d16) != DEF_toImem_rv_port1__read____d16)
      {
	vcd_write_val(sim_hdl, num, DEF_toImem_rv_port1__read____d16, 69u);
	backing.DEF_toImem_rv_port1__read____d16 = DEF_toImem_rv_port1__read____d16;
      }
      ++num;
      if ((backing.DEF_toMMIO_rv_port1__read____d24) != DEF_toMMIO_rv_port1__read____d24)
      {
	vcd_write_val(sim_hdl, num, DEF_toMMIO_rv_port1__read____d24, 69u);
	backing.DEF_toMMIO_rv_port1__read____d24 = DEF_toMMIO_rv_port1__read____d24;
      }
      ++num;
      if ((backing.PORT_getDReq) != PORT_getDReq)
      {
	vcd_write_val(sim_hdl, num, PORT_getDReq, 68u);
	backing.PORT_getDReq = PORT_getDReq;
      }
      ++num;
      if ((backing.PORT_getDResp_a) != PORT_getDResp_a)
      {
	vcd_write_val(sim_hdl, num, PORT_getDResp_a, 68u);
	backing.PORT_getDResp_a = PORT_getDResp_a;
      }
      ++num;
      if ((backing.PORT_getIReq) != PORT_getIReq)
      {
	vcd_write_val(sim_hdl, num, PORT_getIReq, 68u);
	backing.PORT_getIReq = PORT_getIReq;
      }
      ++num;
      if ((backing.PORT_getIResp_a) != PORT_getIResp_a)
      {
	vcd_write_val(sim_hdl, num, PORT_getIResp_a, 68u);
	backing.PORT_getIResp_a = PORT_getIResp_a;
      }
      ++num;
      if ((backing.PORT_getMMIOReq) != PORT_getMMIOReq)
      {
	vcd_write_val(sim_hdl, num, PORT_getMMIOReq, 68u);
	backing.PORT_getMMIOReq = PORT_getMMIOReq;
      }
      ++num;
      if ((backing.PORT_getMMIOResp_a) != PORT_getMMIOResp_a)
      {
	vcd_write_val(sim_hdl, num, PORT_getMMIOResp_a, 68u);
	backing.PORT_getMMIOResp_a = PORT_getMMIOResp_a;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_fopen___d2, 32u);
      backing.DEF_TASK_fopen___d2 = DEF_TASK_fopen___d2;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d15, 69u);
      backing.DEF__0_CONCAT_DONTCARE___d15 = DEF__0_CONCAT_DONTCARE___d15;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_getDResp_a___d21, 69u);
      backing.DEF__1_CONCAT_getDResp_a___d21 = DEF__1_CONCAT_getDResp_a___d21;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_getIResp_a___d17, 69u);
      backing.DEF__1_CONCAT_getIResp_a___d17 = DEF__1_CONCAT_getIResp_a___d17;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_getMMIOResp_a___d25, 69u);
      backing.DEF__1_CONCAT_getMMIOResp_a___d25 = DEF__1_CONCAT_getMMIOResp_a___d25;
      vcd_write_val(sim_hdl, num++, DEF_fromDmem_rv_port0__read____d22, 69u);
      backing.DEF_fromDmem_rv_port0__read____d22 = DEF_fromDmem_rv_port0__read____d22;
      vcd_write_val(sim_hdl, num++, DEF_fromImem_rv_port0__read____d18, 69u);
      backing.DEF_fromImem_rv_port0__read____d18 = DEF_fromImem_rv_port0__read____d18;
      vcd_write_val(sim_hdl, num++, DEF_fromMMIO_rv_port0__read____d26, 69u);
      backing.DEF_fromMMIO_rv_port0__read____d26 = DEF_fromMMIO_rv_port0__read____d26;
      vcd_write_val(sim_hdl, num++, DEF_lfh___d3, 32u);
      backing.DEF_lfh___d3 = DEF_lfh___d3;
      vcd_write_val(sim_hdl, num++, DEF_signed_0___d7, 32u);
      backing.DEF_signed_0___d7 = DEF_signed_0___d7;
      vcd_write_val(sim_hdl, num++, DEF_starting__h1637, 1u);
      backing.DEF_starting__h1637 = DEF_starting__h1637;
      vcd_write_val(sim_hdl, num++, DEF_toDmem_rv_port1__read____d20, 69u);
      backing.DEF_toDmem_rv_port1__read____d20 = DEF_toDmem_rv_port1__read____d20;
      vcd_write_val(sim_hdl, num++, DEF_toImem_rv_port1__read____d16, 69u);
      backing.DEF_toImem_rv_port1__read____d16 = DEF_toImem_rv_port1__read____d16;
      vcd_write_val(sim_hdl, num++, DEF_toMMIO_rv_port1__read____d24, 69u);
      backing.DEF_toMMIO_rv_port1__read____d24 = DEF_toMMIO_rv_port1__read____d24;
      vcd_write_val(sim_hdl, num++, PORT_getDReq, 68u);
      backing.PORT_getDReq = PORT_getDReq;
      vcd_write_val(sim_hdl, num++, PORT_getDResp_a, 68u);
      backing.PORT_getDResp_a = PORT_getDResp_a;
      vcd_write_val(sim_hdl, num++, PORT_getIReq, 68u);
      backing.PORT_getIReq = PORT_getIReq;
      vcd_write_val(sim_hdl, num++, PORT_getIResp_a, 68u);
      backing.PORT_getIResp_a = PORT_getIResp_a;
      vcd_write_val(sim_hdl, num++, PORT_getMMIOReq, 68u);
      backing.PORT_getMMIOReq = PORT_getMMIOReq;
      vcd_write_val(sim_hdl, num++, PORT_getMMIOResp_a, 68u);
      backing.PORT_getMMIOResp_a = PORT_getMMIOResp_a;
    }
}

void MOD_mkpipelined::vcd_prims(tVCDDumpType dt, MOD_mkpipelined &backing)
{
  INST_commit_id.dump_VCD(dt, backing.INST_commit_id);
  INST_fresh_id.dump_VCD(dt, backing.INST_fresh_id);
  INST_fromDmem_rv.dump_VCD(dt, backing.INST_fromDmem_rv);
  INST_fromImem_rv.dump_VCD(dt, backing.INST_fromImem_rv);
  INST_fromMMIO_rv.dump_VCD(dt, backing.INST_fromMMIO_rv);
  INST_lfh.dump_VCD(dt, backing.INST_lfh);
  INST_retired.dump_VCD(dt, backing.INST_retired);
  INST_squashed.dump_VCD(dt, backing.INST_squashed);
  INST_starting.dump_VCD(dt, backing.INST_starting);
  INST_toDmem_rv.dump_VCD(dt, backing.INST_toDmem_rv);
  INST_toImem_rv.dump_VCD(dt, backing.INST_toImem_rv);
  INST_toMMIO_rv.dump_VCD(dt, backing.INST_toMMIO_rv);
}
